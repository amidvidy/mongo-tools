#######################################
#    Tools Driver Config for MCI      #
#######################################

mongo_tools_variables:

## Common download URLs (merge in as hashes)
  mongo_download_urls:
    osx_108: &mongo_url_osx108
      mongo_url: "https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-2.6.4.tgz"
    solaris: &mongo_url_solaris
      mongo_url: "https://fastdl.mongodb.org/sunos5/mongodb-sunos5-x86_64-2.6.4.tgz"
    rhel55_32: &mongo_url_rhell55_32
      mongo_url: "https://fastdl.mongodb.org/linux/mongodb-linux-i686-2.6.4.tgz"
    ubuntu1204: &mongo_url_ubuntu1204
      mongo_url: "http://downloads.10gen.com/linux/mongodb-linux-x86_64-enterprise-ubuntu1204-latest.tgz"
    windows32-bit: &mongo_url_windows32
      mongo_url: "https://fastdl.mongodb.org/win32/mongodb-win32-i386-2.6.4.zip"
    windows64-bit: &mongo_url_windows64
      mongo_url: "https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-2.6.4.zip"


## List of tests to run on each buildvariant
  mongo_tools_task_lists:
    osx_108_task_list: &osx_108_tasks
      - name: bsonutil
      - name: db
      - name: communityDist
      - name: json
      - name: log
      - name: unit
    rhel55_32_task_list: &rhel55_32_tasks
      - name: bsonutil
      - name: db
      - name: communityDist
      - name: json
      - name: log
      - name: unit
      - name: util
    solaris_task_list: &solaris_tasks
      - name: db
      - name: communityDist
      - name: unit
      - name: util
    ubuntu1204_task_list: &ubuntu1204_tasks
      - name: bsonutil
      - name: db
      - name: communityDist
      - name: enterpriseDist
      - name: json
      - name: legacy
      - name: lint
      - name: log
      - name: pool
      - name: progress
      - name: text
      - name: unit
      - name: util
      - name: vet
    windows_32_task_list: &windows_32_tasks
      - name: db
      - name: communityDist
      - name: unit
      - name: util
    windows_64_task_list: &windows_64_tasks
      - name: db
      - name: communityDist
      - name: enterpriseDist
      - name: unit
      - name: util


## Common mongodb arguments
  mongodb_arguments:
    default: &mongodb_default_startup_args
      mongodb_default_args: "--dbpath mongodb/db_files --port 27017 --httpinterface --setParameter=enableTestCommands=1 &"
    ssl: &mongodb_ssl_startup_args
      mongodb_ssl_args: "--sslMode requireSSL --sslCAFile src/src/github.com/mongodb/mongo-tools/common/db/openssl/testdata/ca.pem --sslPEMKeyFile src/src/github.com/mongodb/mongo-tools/common/db/openssl/testdata/server.pem"
    auth: &mongodb_auth_startup_args
      mongodb_auth_args: "--auth"

functions:
  "attach coverage reports" :
    command: attach.task_files
    params:
      "${package} coverage report (HTML)": https://s3.amazonaws.com/mciuploads/mongo-tools/coverage/${package}/${task_id}.html
      "${package} coverage report (TXT)": https://s3.amazonaws.com/mciuploads/mongo-tools/coverage/${package}/${task_id}.txt

  "attach tool":
    command: attach.task_files
    params:
      "${tool} (${edition|community})": https://s3.amazonaws.com/mciuploads/mongo-tools/binaries/${build_id}/${edition|community}/${tool}${extension}

  "build tool":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose
        if [ "Windows_NT" = "$OS" ]; then
          export GOPATH=$(cygpath -w $(pwd));
        else
          export GOPATH=`pwd`;
        fi;
        echo "Building ${tool}..."
        go build ${args} -o ${tool} github.com/mongodb/mongo-tools/${tool}/main

  "download mongod":
    command: shell.exec
    params:
      working_dir: src
      script: |
        rm -rf mongodb
        mkdir mongodb
        cd mongodb
        curl -s ${mongo_url} --output mongodb.tgz
        ${decompress} mongodb.tgz
        chmod +x ./mongodb-*/bin/*
        mv ./mongodb-*/bin/* .

  "fetch tool" :
    command: s3.get
    params:
      bucket: mciuploads
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/${tool}${extension}
      remote_file: mongo-tools/binaries/${build_id}/${edition|community}/${tool}${extension}

  "generate coverage html + text":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose
        if [ "Windows_NT" = "$OS" ]; then
          export GOPATH=$(cygpath -w $(pwd));
        else
          export GOPATH=`pwd`;
        fi;
        if [ "${coverage}" = "true" ]; then
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out -o coverage.txt
        fi;

  "get buildnumber":
    command: keyval.inc
    params:
      key: "${build_variant}_tools"
      destination: "builder_num"

  "kill mongod":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose
        pkill -9 mongod || true;

  "move coverage data":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose
        if [ "Windows_NT" = "$OS" ]; then
          export GOPATH=$(cygpath -w $(pwd));
        else
          export GOPATH=`pwd`;
        fi;
        if [ "${coverage}" = "true" ]; then
          mv src/github.com/mongodb/mongo-tools/${package}/coverage.out $GOPATH
        fi;

  "run unit test":
    command: gotest.run
    params:
      working_dir: src
      tests:
        - dir: src/github.com/mongodb/mongo-tools/${package}
          args: ${coverage_args} ${args}

  "run tool tests":
    command: gotest.run
    params:
      working_dir: src
      tests:
        - dir: src/github.com/mongodb/mongo-tools/mongoimport
          args: ${coverage_args} ${args}
        - dir: src/github.com/mongodb/mongo-tools/mongoexport
          args: ${coverage_args} ${args}
        - dir: src/github.com/mongodb/mongo-tools/mongostat
          args: ${coverage_args} ${args}
        - dir: src/github.com/mongodb/mongo-tools/mongofiles
          args: ${coverage_args} ${args}

  "setup credentials" :
    command: shell.exec
    params:
      working_dir: src
      silent: true
      script: |
        set -o verbose
        cat > mci.buildlogger <<END_OF_CREDS
        slavename='${slave}'
        passwd='${passwd}'
        END_OF_CREDS

  "setup go env":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose
        if [ "Windows_NT" = "$OS" ]; then
          export GOPATH=$(cygpath -w $(pwd));
        else
          export GOPATH=`pwd`;
        fi;
        ${preproc_gpm|echo} ./gpm
        ./gpm install

  "start mongod":
    command: shell.exec
    params:
      working_dir: src
      background: true
      script: |
        set -o verbose
        rm -rf mongodb/${db_files_dir|db_files} mongodb/${logfile|run.log};
        mkdir mongodb/${db_files_dir|db_files};
        echo "Starting mongod...";
        ./mongodb/mongod${extension} ${mongodb_default_args} ${mongod_extra_options|}

  "upload coverage report":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/coverage.${format|txt}
      remote_file: mongo-tools/coverage/${package}/${task_id}.${format|txt}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|text/plain}
      build_variants: ["ubuntu"]

  "upload tool":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/${tool}
      remote_file: mongo-tools/binaries/${build_id}/${edition|community}/${tool}${extension}
      bucket: mciuploads
      permissions: public-read
      content_type: application/octet-stream

pre:
  - command: expansions.fetch
    params:
      keys:
        - local_key: "aws_key"
          remote_key: "project_aws_key"
        - local_key: "aws_secret"
          remote_key: "project_aws_secret"

tasks:
#- name: auth
#  commands:
#    - command: git.get_project
#      params:
#        directory: src
#    - func: "setup go env"
#    - func: "download mongod"
#    - func: "run mongod test"
#      vars:
#        package: "common/db"
#        types: "auth"
#    - func: "generate coverage html + text"
#    - func: "upload coverage report"
#    - func: "upload coverage report"
#      vars:
#        format: "html"
#        content_type: "text/html"
#    - func: "attach coverage reports"
#
#- name: ssl
#  commands:
#    - command: git.get_project
#      params:
#        directory: src
#    - func: "setup go env"
#    - func: "download mongod"
#    - command: expansions.update
#      params:
#        updates:
#          - key: "package"
#            value: "common/db/openssl"
#          - key: "types"
#            value: "ssl"
#          - key: "port"
#            value: "20000"
#    - func: "run mongod test"
#    - command: expansions.update
#      params:
#        updates:
#          - key: "types"
#            value: "ssl_auth"
#          - key: "mongod_extra_options"
#            value: "--sslMode requireSSL --sslCAFile src/src/github.com/mongodb/mongo-tools/common/db/openssl/testdata/ca.pem --sslPEMKeyFile src/src/github.com/mongodb/mongo-tools/common/db/openssl/testdata/server.pem --auth"
#    - func: "run mongod test"
#
- name: bsonutil
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/bsonutil"
    - func: "run unit test"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: db
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/db"
          - key: "args"
            value: "-test.types=db"
    - func: "download mongod"
    - func: "start mongod"
    - func: "run unit test"
    - func: "kill mongod"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: communityDist
  depends_on:
  # - name: "unit"
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    # bsondump
    - func: "build tool"
      vars:
        tool: bsondump
    - func: "upload tool"
      vars:
        tool: bsondump
    - func: "attach tool"
      vars:
        tool: bsondump
    # mongodump
    - func: "build tool"
      vars:
        tool: mongodump
    - func: "upload tool"
      vars:
        tool: mongodump
    - func: "attach tool"
      vars:
        tool: mongodump
    # mongoexport
    - func: "build tool"
      vars:
        tool: mongoexport
    - func: "upload tool"
      vars:
        tool: mongoexport
    - func: "attach tool"
      vars:
        tool: mongoexport
    # mongofiles
    - func: "build tool"
      vars:
        tool: mongofiles
    - func: "upload tool"
      vars:
        tool: mongofiles
    - func: "attach tool"
      vars:
        tool: mongofiles
    # mongoimport
    - func: "build tool"
      vars:
        tool: mongoimport
    - func: "upload tool"
      vars:
        tool: mongoimport
    - func: "attach tool"
      vars:
        tool: mongoimport
    # mongostat
    - func: "build tool"
      vars:
        tool: mongostat
    - func: "upload tool"
      vars:
        tool: mongostat
    - func: "attach tool"
      vars:
        tool: mongostat
    # mongotop
    - func: "build tool"
      vars:
        tool: mongotop
    - func: "upload tool"
      vars:
        tool: mongotop
    - func: "attach tool"
      vars:
        tool: mongotop

- name: enterpriseDist
  depends_on:
  - name: "unit"
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    # bsondump
    - func: "build tool"
      vars:
        tool: bsondump
        args: -tags 'ssl sasl'
    - func: "upload tool"
      vars:
        tool: bsondump
        edition: enterprise
    - func: "attach tool"
      vars:
        tool: bsondump
        edition: enterprise
    # mongodump
    - func: "build tool"
      vars:
        tool: mongodump
        args: -tags 'ssl sasl'
    - func: "upload tool"
      vars:
        tool: mongodump
        edition: enterprise
    - func: "attach tool"
      vars:
        tool: mongodump
        edition: enterprise
    # mongoexport
    - func: "build tool"
      vars:
        tool: mongoexport
        args: -tags 'ssl sasl'
    - func: "upload tool"
      vars:
        tool: mongoexport
        edition: enterprise
    - func: "attach tool"
      vars:
        tool: mongoexport
        edition: enterprise
    # mongofiles
    - func: "build tool"
      vars:
        tool: mongofiles
        args: -tags 'ssl sasl'
    - func: "upload tool"
      vars:
        tool: mongofiles
        edition: enterprise
    - func: "attach tool"
      vars:
        tool: mongofiles
        edition: enterprise
    # mongoimport
    - func: "build tool"
      vars:
        tool: mongoimport
        args: -tags 'ssl sasl'
    - func: "upload tool"
      vars:
        tool: mongoimport
        edition: enterprise
    - func: "attach tool"
      vars:
        tool: mongoimport
        edition: enterprise
    # mongostat
    - func: "build tool"
      vars:
        tool: mongostat
        args: -tags 'ssl sasl'
    - func: "upload tool"
      vars:
        tool: mongostat
        edition: enterprise
    - func: "attach tool"
      vars:
        tool: mongostat
        edition: enterprise
    # mongotop
    - func: "build tool"
      vars:
        tool: mongotop
        args: -tags 'ssl sasl'
    - func: "upload tool"
      vars:
        tool: mongotop
        edition: enterprise
    - func: "attach tool"
      vars:
        tool: mongotop
        edition: enterprise

- name: json
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/json"
    - func: "run unit test"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: legacy
  depends_on:
  - name: communityDist
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
    - func: "fetch tool"
      vars:
        tool: mongoimport
    - func: "fetch tool"
      vars:
        tool: mongoexport
    - func: "fetch tool"
      vars:
        tool: mongodump
    - func: "fetch tool"
      vars:
        tool: mongofiles
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            export GOPATH=$(cygpath -w $(pwd));
          else
            export GOPATH=`pwd`;
          fi;
          mv ./mongodb/mongo* .
          mv src/github.com/mongodb/mongo-tools/legacy/* .
          python smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} tool

- name: lint
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            export GOPATH=$(cygpath -w $(pwd));
          else
            export GOPATH=`pwd`;
          fi;
          retVal=$(go run src/github.com/3rf/mongo-lint/golint/golint.go src/github.com/mongodb/mongo-tools/); if [ "$retVal" = "" ]; then exit 0; else exit 1; fi;

- name: log
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/log"
    - func: "run unit test"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: pool
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/pool"
    - func: "run unit test"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: progress
  commands:
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/progress"
    - func: "run unit test"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: text
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/text"
    - func: "run unit test"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: unit
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - func: "download mongod"
    # mongoimport
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "mongoimport"
    - func: "start mongod"
    - func: "run tool tests"
    - func: "kill mongod"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"
    # TODO bsondump needs tests
    # TODO mongodump needs tests
    # TODO mongotop needs tests

- name: util
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: expansions.update
      params:
        updates:
          - key: "package"
            value: "common/util"
    - func: "run unit test"
    - func: "move coverage data"
    - func: "generate coverage html + text"
    - func: "upload coverage report"
    - func: "upload coverage report"
      vars:
        format: "html"
        content_type: "text/html"
    - func: "attach coverage reports"

- name: vet
  commands:
    - func: "kill mongod"
    - command: git.get_project
      params:
        directory: src
    - func: "setup go env"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            export GOPATH=$(cygpath -w $(pwd));
          else
            export GOPATH=`pwd`;
          fi;
          retVal=$(go tool vet src/github.com/mongodb/mongo-tools/); if [ "$retVal" = "" ]; then exit 0; else exit 1; fi;

buildvariants:
#######################################
#           OSX Buildvariant          #
#######################################
- name: osx-108
  display_name: OSX 10.8 64-bit
  run_on:
  - osx-108
  expansions:
    <<: *mongo_url_osx108
    <<: *mongodb_default_startup_args
  tasks: *osx_108_tasks

#######################################
#          RHEL Buildvariant          #
#######################################
- name: linux-32
  display_name: Linux 32-bit
  run_on:
  - rhel55-32
  expansions:
    <<: *mongo_url_rhell55_32
    <<: *mongodb_default_startup_args
  tasks: *rhel55_32_tasks

- name: ubuntu
  display_name: Linux 64-bit
  run_on:
  - ubuntu1204-test
  expansions:
    <<: *mongo_url_ubuntu1204
    <<: *mongodb_default_startup_args
    coverage: true
    coverage_args: "-coverprofile=coverage.out"
  tasks: *ubuntu1204_tasks

#######################################
#         Solaris Buildvariant        #
#######################################
- name: solaris
  display_name: Solaris 64-bit
  run_on:
  - solaris
  expansions:
    <<: *mongo_url_solaris
    <<: *mongodb_default_startup_args
  tasks: *solaris_tasks

#######################################
#        Windows Buildvariants        #
#######################################
- name: windows-32
  display_name: Windows 32-bit
  run_on:
  - windows-32
  expansions:
    <<: *mongo_url_windows32
    <<: *mongodb_default_startup_args
    extension: .exe
    preproc_gpm: "perl -pi -e 's/\\r\\n/\\n/g' "
  tasks: *windows_32_tasks

- name: windows-64
  display_name: Windows 64-bit
  run_on:
  - windows-64-vs2013-test
  expansions:
    <<: *mongo_url_windows64
    <<: *mongodb_default_startup_args
    extension: .exe
    preproc_gpm: "perl -pi -e 's/\\r\\n/\\n/g' "
  tasks: *windows_64_tasks
